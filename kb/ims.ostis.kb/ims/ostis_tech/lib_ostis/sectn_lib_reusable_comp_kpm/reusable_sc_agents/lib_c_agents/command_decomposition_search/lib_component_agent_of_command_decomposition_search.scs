lib_component_agent_of_command_decomposition_search
=> nrel_main_idtf:
	[Компонент библиотеки. sc-агент формирования списка команд для заданного списка аргументов]
	(* <- lang_ru;; *);
	[Library component. sc-agent of command list forming for given list of arguments]
	(* <- lang_en;; *);

<- library_of_platform_independent_reusable_components; 
<- library_of_atomic_reusable_components; 

-> rrel_key_sc_element: 
	.platform_independent_realization_of_sc_agent_of_command_decomposition_search;

<- rrel_key_sc_element: 
	...
	(*
	<- explanation;;
	<= nrel_sc_text_translation:
		...
		(*
		-> rrel_example:
			[Результатом работы sc-агента формирования списка команд для заданного списка аргументов является множество атомарных команд, применимых к заданному набору аргументов. Текущие ограничения:
			1. Пока учитываются только варианты с 1 или 2 аргументами.
			2. Не учитывается наследование типов аргументов (например "sc-утверждение", "импликативное sc-утверждение" и т.д.). Если неатомарная команда применима для какого-либо класса, то все дочерние атомарные по умолчанию добавляются в ответ.
			3. Допускается задание нескольких типов аргумента для одной и той же команды.
			4. Если аргумент один, не учитывается (можно не указывать) его роль во множестве аргументов.]
			(* <- lang_ru;; *);; 
		*);;
	*);;

question_command_decomposition_search
<- sc_node_not_relation;
=> nrel_main_idtf:
 	[действие. найти декомпозицию команды]
	(* <- lang_ru;;	*);
=> nrel_main_idtf:
	[action. to find command decomposition]
	(* <- lang_en;;	*);;
