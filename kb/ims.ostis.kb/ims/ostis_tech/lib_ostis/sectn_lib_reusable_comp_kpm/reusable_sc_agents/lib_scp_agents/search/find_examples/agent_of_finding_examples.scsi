agent_of_finding_examples
=> nrel_main_idtf:
    [агентная scp-программа поиска примеров для заданного понятия] (* <- lang_ru;; *);
    [agent scp-program of searching examples for the given concept] (* <- lang_en;; *);
    <- agent_scp_program;;

scp_program -> agent_of_finding_examples 
    (*
    -> rrel_params: .agent_of_finding_examples_params 
        (*
        -> rrel_1: rrel_in: _event;;
        -> rrel_2: rrel_in: _input_arc;;
        *);;

    -> rrel_operators: .agent_of_finding_examples_operator_set 
        (*
        -> rrel_init: .agent_of_finding_examples_operator1 
            (*
            <- searchElStr3;;
            -> rrel_1: rrel_assign: rrel_scp_var: _temp;;
            -> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
            -> rrel_3: rrel_assign: rrel_scp_var: _quest;;

            => nrel_goto: .agent_of_finding_examples_operator2;;
            *);;

        -> .agent_of_finding_examples_operator2 
            (*
            <- searchElStr3;;
            -> rrel_1: rrel_fixed: rrel_scp_const: question_of_finding_examples;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

            => nrel_then: .agent_of_finding_examples_operator3;;
            => nrel_else: .agent_of_finding_examples_operator_return;;
            *);;

        -> .agent_of_finding_examples_operator3 
            (*
            <- searchElStr3;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_assign: rrel_scp_var: _param;;

            => nrel_then: .agent_of_finding_examples_operator3_find_context;;
            => nrel_else: .agent_of_finding_examples_operator_return;;
            *);;

        -> .agent_of_finding_examples_operator3_find_context
            (*
            <- searchElStr5;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
            -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_assign: rrel_scp_var: _context;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: nrel_context_of_action;;

            => nrel_then: .agent_of_finding_examples_operator3_set_context_existence_to_true;;
            => nrel_else: .agent_of_finding_examples_operator3_set_context_existence_to_false;;
            *);;

        -> .agent_of_finding_examples_operator3_set_context_existence_to_true
            (*
            <- contAssign;;         
            
            -> rrel_1: rrel_assign: rrel_scp_var:  _is_context_exist;;
            -> rrel_2: rrel_fixed: rrel_scp_const: [true];;

            => nrel_goto: .agent_of_finding_examples_operator4A;;
            *);; 

        -> .agent_of_finding_examples_operator3_set_context_existence_to_false
            (*
            <- contAssign;;         
            
            -> rrel_1: rrel_assign: rrel_scp_var:  _is_context_exist;;
            -> rrel_2: rrel_fixed: rrel_scp_const: [false];;

            => nrel_goto: .agent_of_finding_examples_operator4A;;
            *);;    

        -> .agent_of_finding_examples_operator4A 
            (*
            <- genEl;;

            -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _answer_finding_examples;;

            => nrel_goto: .agent_of_finding_examples_operator4B_is_context_exist;;
            *);;

        -> .agent_of_finding_examples_operator4B_is_context_exist
            (*
            <- stringIfEq;;         
            
            -> rrel_1: rrel_fixed: rrel_scp_var:  _is_context_exist;;
            -> rrel_2: rrel_fixed: rrel_scp_const: [true];;

            => nrel_then: .agent_of_finding_examples_operator4B_context_logic_1;;
            => nrel_else: .agent_of_finding_examples_operator4B;;
            *);;    

        -> .agent_of_finding_examples_operator4B_context_logic_1
            (*
            <- searchSetStr5;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_assign: rrel_scp_var: _node;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: rrel_example;;

            -> rrel_set_3: rrel_assign: rrel_scp_var: _all_examples;;

            => nrel_then: .agent_of_finding_examples_operator4B_context_logic_2;;
            => nrel_else: .agent_of_finding_examples_operator_return;;
            *);;

        -> .agent_of_finding_examples_operator4B_context_logic_2 
            (*
            <- call;;
            
            -> rrel_1: rrel_fixed: rrel_scp_const: proc_of_finding_intersection_of_two_sets;;
            -> rrel_2: rrel_fixed: rrel_scp_const: .agent_of_finding_examples_operator4B_context_logic_2_params 
                (*
                -> rrel_1: rrel_fixed: rrel_scp_var: _all_examples;;
                -> rrel_2: rrel_fixed: rrel_scp_var: _context;;
                -> rrel_3: rrel_assign: rrel_scp_var: _set_of_examples;; 
                *);;
            -> rrel_3: rrel_assign: rrel_scp_var: _descr1;;

            => nrel_goto: .agent_of_finding_examples_operator4B_context_logic_3;;
            *);;    

        -> .agent_of_finding_examples_operator4B_context_logic_3
            (*
            <- waitReturn;;
            
            -> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;

            => nrel_goto: .agent_of_finding_examples_operator4B_context_logic_4;;
            *);;  

        -> .agent_of_finding_examples_operator4B_context_logic_4
            (*
            <- searchElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _set_of_examples;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_assign: rrel_scp_var: _example;;

            => nrel_then: .agent_of_finding_examples_operator4B_context_logic_5;;
            => nrel_else: .agent_of_finding_examples_operator4B_context_logic_8;;
            *);;  

        -> .agent_of_finding_examples_operator4B_context_logic_5
            (*
            <- eraseEl;;

            -> rrel_1: rrel_erase: rrel_fixed: rrel_pos_const_perm: rrel_scp_var: _arc1;;

            => nrel_goto: .agent_of_finding_examples_operator4B_context_logic_6;;
            *);;

        -> .agent_of_finding_examples_operator4B_context_logic_6
            (*
            <- searchSetStr5;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _example;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: rrel_example;;

            -> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_finding_examples;;

            => nrel_then: .agent_of_finding_examples_operator4B_context_logic_7;;
            => nrel_else: .agent_of_finding_examples_operator4B_context_logic_4;;
            *);;

        -> .agent_of_finding_examples_operator4B_context_logic_7
            (*
            <- genElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _example;;

            => nrel_goto: .agent_of_finding_examples_operator4B_context_logic_4;;
            *);;

        -> .agent_of_finding_examples_operator4B_context_logic_8
            (*
            <- eraseEl;;

            -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _set_of_examples;;

            => nrel_goto: .agent_of_finding_examples_operator4C;;
            *);;

        -> .agent_of_finding_examples_operator4B
            (*
            <- searchSetStr5;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_assign: rrel_scp_var: _node;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: rrel_example;;
                
            -> rrel_set_2: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_set_3: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_set_4: rrel_fixed: rrel_scp_var: _answer_finding_examples;;

            => nrel_then: .agent_of_finding_examples_operator4C;;
            => nrel_else: .agent_of_finding_examples_operator_return;;
            *);;
        
        -> .agent_of_finding_examples_operator4C
            (*
            <- genElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
            -> rrel_3: rrel_fixed: rrel_scp_const: rrel_example;;

            => nrel_goto: .agent_of_finding_examples_operator4D;;
            *);;

         -> .agent_of_finding_examples_operator4D
            (*
            <- genElStr3;;
            
            -> rrel_1: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _param;;

            => nrel_goto: .agent_of_finding_examples_operator_gen_answer_finding_examples;;
            *);;  
                
        -> .agent_of_finding_examples_operator_gen_answer_finding_examples 
            (*
            <- genElStr5;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
            -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _answer_finding_examples;;
            -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: nrel_answer;;

            => nrel_goto: .agent_of_finding_examples_operator_return;;
            *);;
        
         -> .agent_of_finding_examples_operator_return 
            (*
            <- return;;
            *);;
        *);;
    *);;


